---
title: Data Visualizations
author: "Jo Hardin - AWM + GEM"
subtitle: "October 30, 2025"
format:
  revealjs:
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: all
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
---

```{r include=FALSE}
library(tidyverse)
library(mosaic)
library(knitr)
library(ggthemes)
options(pillar.width = 70)
theme_set(theme_gray())
```

# Visualizing the data


## What and why

-   Data visualization is the process of transforming raw data into visual formats, like **charts**, **graphs**, or **maps**, to make it easier to understand and interpret

-   Communicate results **clearly** and **effectively**

-   Supports evidence-based decisions across many fields.

## What is **ggplot2**?

-   **ggplot2** is an R package for data visualization
-   Encoded functions for numerous different plot types
-   Builds plots in layers using `+`

## Basic structure of a ggplot

We will go over each function one at a time.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2|3|4|5"

# General structure
data |>
  ggplot(aes(x = ..., y = ...)) +
  geom_*() +
  labs("label for you plot and axes")
      
```


## Births in 2015

```{r}
library(mosaic)
Births2015
```

Obtained from the National Center for Health Statistics, National Vital Statistics System, Natality, 2015 data.


## How do we make this plot?
   
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(
  data = Births2015, aes(x = date, y = births)) + 
  geom_point() +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
Two Questions:

 1. What do we want R to do?  (What is the goal?)
 
 2. What does R need to know?
:::
::::



## How do we make this plot?
   
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(
  data = Births2015, aes(x = date, y = births)) + 
  geom_point() +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
1. Goal: scatterplot = a plot with points
 
2. What does R need to know?
 
    * data source: `Births2015`

    * aesthetics: 
 
        * `date -> x`
        * `births -> y`

    * points
:::
::::

## How do we make this plot?
   
:::: {.columns} 
::: {.column width="40%"}
```{r, echo=FALSE}
ggplot(
  data = Births2015, aes(x = date, y = births)) + 
  geom_point() +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1,2,7,8"
ggplot(data = Births2015, 
       aes(x = date, y = births)) + 
  geom_point() +
  labs(title = "US Births in 2015")

ggplot() +
  geom_point(data = Births2015, 
             aes(x = date, y = births)) +
  labs(title = "US Births in 2015")
```

:::
::::

## Layers: layer 0 

:::: {.columns} 
::: {.column width="40%"}
```{r}
#| echo: false
ggplot()
```
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1"
ggplot() 
```

:::
::::

## Layers: layer 1 

:::: {.columns} 
::: {.column width="40%"}
```{r, echo=FALSE}
ggplot(data = Births2015, aes(x = date, y = births))
```
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1,2"
ggplot(data = Births2015, 
       aes(x = date, y = births)) 
```

:::
::::

## Layers: layer 2 

:::: {.columns} 
::: {.column width="40%"}
```{r, echo=FALSE}
ggplot(data = Births2015, aes(x = date, y = births)) + 
  geom_point()
```
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
ggplot(data = Births2015, 
       aes(x = date, y = births)) + 
  geom_point()
```

:::
::::


## Layers: layer 3 

:::: {.columns} 
::: {.column width="40%"}
```{r, echo=FALSE}
ggplot(data = Births2015, aes(x = date, y = births)) + 
  geom_point() +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
ggplot(data = Births2015, 
       aes(x = date, y = births)) + 
  geom_point() +
  labs(title = "US Births in 2015")
```

:::
::::


## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(data = Births2015) +
  geom_point(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
What has changed?  

 * new aesthetic: mapping color to day of week

:::
::::

## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(data = Births2015) +
  geom_point(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
ggplot(data = Births2015,
       aes(x = date,
           y = births, 
           color = wday)) +
  geom_point() +
  labs(title = "US Births in 2015")
```
:::
::::

## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(data = Births2015) +
  geom_line(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 2015")
```
:::
::::

## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(data = Births2015) +
  geom_line(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
lines instead of dots!

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "5"
ggplot(data = Births2015,
         aes(x = date, 
             y = births,
             color = wday)) +
  geom_line() +
  labs(title = "US Births in 2015")
```

:::
::::

## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(data = Births2015, 
       aes(x = date, y = births, color = wday)) + 
  geom_point() + 
  geom_line() +
  labs(title = "US Births in 2015")
```
:::
::::

## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data = Births2015, 
       aes(x = date, y = births, color = wday)) + 
  geom_point() + 
  geom_line() +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
Now there are two **layers**: one with points and one with
lines

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "5,6"
ggplot(data = Births2015,
       aes(x = date,
           y = births,
           color = wday)) + 
  geom_point() +  
  geom_line() +
  labs(title = "US Births in 2015")
```


 *  The layers are placed one on top of the other:  the points 
are *below* and the lines are *above*.   

 * `data` and `aes` specified in `ggplot()` affect all geoms
:::
::::


## What does this code do?
  

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"
ggplot(data = Births2015,
       aes(x = date, y = births, color = "navy")) + 
  geom_point() +
  labs(title = "US Births in 2015") 
```


## What does this code do?

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2"
ggplot(data = Births2015,
       aes(x = date, y = births, color = "navy")) + 
  geom_point()  +
  labs(title = "US Births in 2015")
```


This is *mapping* the color aesthetic to a new variable with 
only one value ("navy").  
So all the dots get set to the same color, but it's not navy.


## Setting vs. Mapping

If we want to *set* the color to be navy for all of the dots, we do 
it outside the `aes()` designation:

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2,3"
ggplot(data = Births2015,
       aes(x = date, y = births)) +   # map variables 
  geom_point(color = "navy")    +   # set attributes
  labs(title = "US Births in 2015")
```


* Note that `color = "navy"` is now outside of the aesthetics list.  That's how `ggplot2` distinguishes between mapping and setting.



## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(data = Births2015,
       aes(x = date, y = births)) + 
  geom_line(aes(color = wday)) +       
  geom_point(color = "navy")  +          
  labs(title = "US Births in 2015")
```
:::
::::

## How do we make this plot?
    
:::: {.columns} 
::: {.column width="50%"}
```{r, echo=FALSE}
ggplot(data = Births2015,
       aes(x = date,
           y = births)) + 
  geom_line(aes(color = wday)) +       
  geom_point(color = "navy") +           
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4,5"
ggplot(data = Births2015,
       aes(x = date,
           y = births)) + 
  geom_line(aes(color = wday)) +      
  geom_point(color = "navy")  +         
  labs(title = "US Births in 2015")
```


* `ggplot()` establishes the default data and aesthetics
for the geoms, but each geom may change these defaults.

* good practice: put into `ggplot()` the things that affect all (or most) of the layers; rest in `geom_XXXX()`
:::
::::

## Setting vs. Mapping (again)

Information gets passed to the plot via:

a. `map` the **variable** information inside the aes (aesthetic) command

a. `set` the **non-variable** information outside the aes (aesthetic) command


## `geom_*()` types
 
```{r, echo=TRUE, comment=NA}
apropos("^geom_")
```

## `geom_*()` pics

![](images/geoms.jpg)

<a href = "https://ggplot2.tidyverse.org/" target = "_blank">https://ggplot2.tidyverse.org/</a>


## `geom_*()` help

help pages will tell you their aesthetics, default stats, etc.

```{r}
#| eval: false
#| echo: true

?geom_area             # for example
```




## Let's try `geom_area`

:::: {.columns} 
::: {.column width="50%"}
```{r, eval=TRUE}
ggplot(data = Births2015,
       aes(x = date,
           y = births, 
           fill = wday)) + 
  geom_area() +
  labs(title = "US Births in 2015")
```

:::
::::

## Let's try `geom_area`

:::: {.columns} 
::: {.column width="50%"}
```{r, eval=TRUE}
ggplot(data = Births2015,
       aes(x = date, y = births, fill = wday)) + 
  geom_area() +
  labs(title = "US Births in 2015")
```
:::

::: {.column width="50%"}
... not a good plot


* overplotting is hiding much of the data
* extending y-axis to 0 may or may not be desirable.
:::
::::

## Side note: what makes a plot good?
   

Most (all?) graphics are intended to help us make comparisons

* How does something change over time?
* Do my treatments matter?  How much?
* Do treatment and control respond the same way?

::: {.callout-important}
# Key plot metric
Does my plot make the comparisons I am interested in:

* easily, and 
* accurately?
:::


## Common `geom()` functions

-   geom_point(): scatter plot (x vs y)
-   geom_bar(): bar charts (**categorical** data)
-   geom_col(): bar chart with height from y variable (**categorical** data)
-   geom_histogram(): distribution of numeric variable
-   geom_line(): connect the dots across (x,y) coordinates




## Time for some different data

HELPrct: Health Evaluation and Linkage to Primary care randomized
clinical trial.  Subjects admitted for treatment for addiction to one 
of three substances.

```{r}
#| eval: false
head(HELPrct)
```

```{r}
#| echo: false
head(HELPrct) |> 
  gt::gt()
```

```{r echo = FALSE}
HELP_data <- left_join(HELPrct, HELPfull, by = c( "id" = "ID")) |>
  filter(!is.na(A11E)) |>
  mutate(children = ifelse(A11E == 0, "no", "yes"))
```



## Who are the people in the study?

:::: {.columns} 
::: {.column width="50%"}
```{r echo=FALSE}
HELP_data |> 
  ggplot(aes(x = substance)) + 
  geom_bar() +
  labs(title = "HELP trial")
```
:::

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = substance)) + 
  geom_bar() +
  labs(title = "HELP trial")
```


* Hmm.  What's up with `y`?

:::
::::

## Who are the people in the study?

:::: {.columns} 
::: {.column width="50%"}
```{r echo=FALSE}
HELP_data |> 
  ggplot(aes(x = substance)) + 
  geom_bar() +
  labs(title = "HELP trial")
```
:::

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = substance)) + 
  geom_bar() +
  labs(title = "HELP trial")
```


* Hmm.  What's up with `y`?

    * `stat_bin()` is being applied to the data before the 
    `geom_bar()` gets to do its thing.  Binning creates the
    `y` values.
:::
::::

## Who are the people in the study?

:::: {.columns} 
::: {.column width="50%"}
```{r message=FALSE, warning=FALSE, echo=FALSE}
HELP_data |> 
  ggplot(aes(x = substance, 
             fill = children)) + 
  geom_bar() +
  labs(title = "HELP trial")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = substance,
           fill = children)) + 
  geom_bar() +
  labs(title = "HELP trial")
```

:::
::::

## Who are the people in the study?

:::: {.columns} 
::: {.column width="50%"}
```{r message=FALSE, warning=FALSE, echo=FALSE}
ggplot(HELP_data,
       aes(x = substance,
           fill = children)) + 
  geom_bar(position = "fill") +
  labs(title = "HELP trial",
       y = "actually, percent")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
ggplot(HELP_data,
       aes(x = substance,
           fill = children)) + 
  geom_bar(position = "fill") +
  labs(title = "HELP trial",
       y = "actually, percent")
```

:::
::::

## How old are people in the HELP study?
     

:::: {.columns} 
::: {.column width="50%"}
```{r, fig.height=1.5, message=TRUE, echo=FALSE}
HELP_data |> 
  ggplot(aes(x = age)) + 
  geom_histogram() +
  labs(title = "HELP trial")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_histogram() +
  labs(title = "HELP trial")
```


Notice the messages

* `stat_bin`:  Histograms are not mapping the raw data but
binned data.  
`stat_bin()` performs the data transformation.

* `binwidth`: a default binwidth has been selected, but we should
really choose our own.
:::
::::

## Setting the binwidth manually

:::: {.columns} 
::: {.column width="50%"}
```{r echo=FALSE}
HELP_data |> 
  ggplot(aes(x = age)) + 
  geom_histogram(binwidth = 2) +
  labs(title = "HELP trial")
```

:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_histogram(binwidth = 2) +
  labs(title = "HELP trial")
```

:::
::::

## How old are people in the HELP study? -- Other geoms
     
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_freqpoly(binwidth = 2) +
  labs(title = "HELP clinical trial at detoxification unit")
```

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_density() +
  labs(title = "HELP clinical trial at detoxification unit")
```

## Selecting stat and geom manually
  
Every geom comes with a default stat

* for simple cases, the stat is `stat_identity()` which does nothing
* we can mix and match geoms and stats however we like

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_line(stat = "density") +
  labs(title = "HELP clinical trial at detoxification unit")
```


## Selecting stat and geom manually
    
Every stat comes with a default geom, every geom with a default stat

* we can specify stats instead of geom, if we prefer
* we can mix and match geoms and stats however we like

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = age)) + 
  stat_density(geom = "line") +
  labs(title = "HELP clinical trial at detoxification unit")
```

## More combinations

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3,4"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_point(stat = "bin", binwidth = 3) + 
  geom_line(stat = "bin", binwidth = 3)  +
  labs(title = "HELP clinical trial at detoxification unit")
```


## More combinations

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_area(stat = "bin", binwidth = 3)  +
  labs(title = "HELP clinical trial at detoxification unit")
```



## More combinations

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3,4,5,6"
ggplot(data = HELP_data,
       aes(x = age)) + 
  geom_point(stat = "bin", 
             binwidth = 3, 
             aes(size = ..count..)) +
  geom_line(stat = "bin", binwidth = 3) +
  labs(title = "HELP clinical trial at detoxification unit")
```


## How much drinking? (i1)
    

```{r, fig.height=1.5}
HELP_data |> 
  ggplot(aes(x = i1)) + geom_histogram() +
  labs(title = "HELP clinical trial at detoxification unit")
```



## How much drinking? (i1)
 
```{r, fig.height=1.5}
HELP_data |> 
  ggplot(aes(x = i1)) + geom_density() +
  labs(title = "HELP clinical trial at detoxification unit")
```



## How much drinking? (i1)
 
```{r, fig.height=1.5}
HELP_data |> 
  ggplot(aes(x = i1)) + geom_area(stat = "density") +
  labs(title = "HELP clinical trial at detoxification unit")
```




## Covariates: Adding in more variables
  

Using color and linetype:

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3,4"
ggplot(data = HELP_data,
       aes(x = i1,
           color = substance,
           linetype = children)) + 
  geom_line(stat = "density") +
  labs(title = "HELP clinical trial at detoxification unit")
```


## Using color and facets

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "4"
ggplot(data = HELP_data,
       aes(x = i1, color = substance)) + 
  geom_line(stat = "density") + 
  facet_grid( . ~ children ) +
  labs(title = "HELP clinical trial at detoxification unit")
```


```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "4"
ggplot(data = HELP_data,
       aes(x = i1, color = substance)) + 
  geom_line(stat = "density") + 
  facet_grid( children ~ . ) +
  labs(title = "HELP clinical trial at detoxification unit")
```


## Boxplots 
   
Boxplots use `stat_quantile()` (five number summary).

The quantitative variable must be `y`, and there must be an 
additional `x` variable. 

```{r fig.height = 3.5}
HELP_data |> 
  ggplot(aes(x = substance, y = age, color = children)) + 
  geom_boxplot() +
  labs(title = "HELP clinical trial at detoxification unit")
```



## Horizontal boxplots
    
Horizontal boxplots  are obtained by flipping the coordinate system:

* `coord_flip()` may be used with other plots as well to reverse the roles
of `x` and `y` on the plot.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "6"
ggplot(data = HELP_data,
       aes(x = substance, 
           y = age, 
           color = children)) + 
  geom_boxplot() +
  coord_flip() +
  labs(title = "HELP clinical trial at detoxification unit")
```


## Axes scaling with boxplots
    
We can scale the continuous axis
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "6"
ggplot(data = HELP_data,
       aes(x = substance, 
           y = age, 
           color = children)) + 
  geom_boxplot() +
  coord_trans(y = "exp") +
  labs(title = "HELP clinical trial at detoxification unit")
```



## Give me some space
  
We've triggered a new feature: `dodge` (for dodging things left/right).
We can control how much if we set the dodge manually.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "5"
ggplot(data = HELP_data,
       aes(x = substance, 
           y = age, 
           color = children)) + 
  geom_boxplot(position = position_dodge(width=1)) +
  labs(title = "HELP clinical trial at detoxification unit")
```


## Issues with bigger data

* Although we can see a generally positive association (as we would 
expect), the overplotting may be hiding information.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "6"
library(NHANES)
dim(NHANES)
ggplot(data = NHANES,
       aes(x = Height, y = Weight)) +
  geom_point() + 
  facet_grid( Gender ~ PregnantNow )
```


## Using alpha (opacity)

One way to deal with overplotting is to set the opacity low.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = NHANES,
       aes(x = Height, y = Weight)) +
  geom_point(alpha=0.01) + 
  facet_grid( Gender ~ PregnantNow )
```


## geom_density2d
  
Alternatively (or simultaneously) we might prefer a different 
geom altogether.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = NHANES,
       aes(x = Height, y = Weight)) +
  geom_density2d() + 
  facet_grid( Gender ~ PregnantNow )
```


## Multiple layers

:::: {.columns} 
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2,3"
ggplot(data = HELP_data, 
       aes(x = children, y = age)) +
  geom_boxplot(outlier.size = 0) +
  geom_point(alpha=.6) +
  coord_flip() +
  labs(title = "HELP clinical trial at detoxification unit")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "4"
ggplot(data = HELP_data,
       aes(x = children, y = age)) +
  geom_boxplot(outlier.size = 0) +
  geom_jitter(alpha=.6, width = 0.1) +
  coord_flip() +
  labs(title = "HELP clinical trial at detoxification unit")
```

:::
::::

## Multiple layers

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "5"
ggplot(data = HELP_data,
       aes(x = children, y = age)) +
  geom_boxplot(outlier.size = 0) +
  geom_point(alpha=.6, 
             position = position_jitter(width=.1, height=0)) +
  coord_flip() +
  labs(title = "HELP clinical trial at detoxification unit")
```


## Things I haven't mentioned (much)
 
 * coords (`coord_flip()` is good to know about)
 
 * themes (for customizing appearance)

 * position (`position_dodge()`, `position_jitterdodge()`,
 `position_stack()`, etc.)
 
 * transforming axes
 
## themes 

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "4"
library(ggthemes)
ggplot(Births2015, aes(x = date, y = births)) + 
  geom_point() + 
  theme_wsj()
```




## `jitterdodge()`
 
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "6"
ggplot(data = HELP_data, 
       aes(x = substance, y = age, color = children)) +
  geom_boxplot(coef = 10, position = position_dodge()) +
  geom_point(aes(color = children, 
                 fill = children), 
             position = position_jitterdodge()) +
  labs(title = "HELP clinical trial at detoxification unit")
```




## A little bit of everything

```{r, fig.width=14}
ggplot(data = HELP_data, aes(x = substance, y = age, color = children)) +
  geom_boxplot(coef = 10, position = position_dodge(width=1)) +
  geom_point(aes(fill = children), alpha=.5, 
             position = position_jitterdodge(dodge.width=1, jitter.width = 0.2)) + 
  facet_wrap(~homeless) +
  labs(title = "HELP clinical trial at detoxification unit")
```


## Want to learn more?
    

 * [docs.ggplot2.org/](http://docs.ggplot2.org/)
 
 * [R for Data Science](https://r4ds.had.co.nz/) by Hadley Wickham and Garrett Grolemund

